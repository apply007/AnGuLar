{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup, FormControl, Validators, FormArray } from '@angular/forms';\nimport { CustomValidators } from './Validators/noSpaceAllowed.validator';\nexport let AppComponent = class AppComponent {\n  constructor() {\n    this.title = 'template-driven-form';\n    this.formStatus = '';\n    this.formdata = {};\n  }\n  ngOnInit() {\n    this.reactiveForm = new FormGroup({\n      firstname: new FormControl(null, [Validators.required, CustomValidators.noSpaceAllowed, Validators.min(3)]),\n      lastname: new FormControl(null, [Validators.required, CustomValidators.noSpaceAllowed]),\n      email: new FormControl(null, [Validators.required, Validators.email]),\n      username: new FormControl(null, Validators.required, CustomValidators.checkUserName),\n      dob: new FormControl(null),\n      gender: new FormControl('male'),\n      address: new FormGroup({\n        street: new FormControl(null, Validators.required),\n        country: new FormControl('India', Validators.required),\n        city: new FormControl(null),\n        region: new FormControl(null),\n        postal: new FormControl(null, Validators.required)\n      }),\n      skills: new FormArray([new FormControl(null, Validators.required)]),\n      experience: new FormArray([])\n    });\n    // this.reactiveForm.get('firstname').valueChanges.subscribe((value) => {\n    //   console.log(value);\n    // })\n    // this.reactiveForm.valueChanges.subscribe((data) => {\n    //   console.log(data);\n    // })\n    // this.reactiveForm.get('username').statusChanges.subscribe((status) => {\n    //   console.log(status);\n    // })\n    this.reactiveForm.statusChanges.subscribe(status => {\n      console.log(status);\n      this.formStatus = status;\n    });\n  }\n  OnFormSubmitted() {\n    console.log(this.reactiveForm);\n    this.formdata = this.reactiveForm.value;\n    this.reactiveForm.reset({\n      firstname: null,\n      lastname: null,\n      email: null,\n      username: null,\n      dob: null,\n      gender: 'male',\n      address: {\n        street: null,\n        country: 'India',\n        city: null,\n        region: null,\n        postal: null\n      },\n      skills: [null],\n      experience: []\n    });\n  }\n  AddSkills() {\n    this.reactiveForm.get('skills').push(new FormControl(null, Validators.required));\n  }\n  DeleteSkill(index) {\n    const controls = this.reactiveForm.get('skills');\n    controls.removeAt(index);\n  }\n  AddExperience() {\n    const frmgroup = new FormGroup({\n      company: new FormControl(null),\n      position: new FormControl(null),\n      totalExp: new FormControl(null),\n      start: new FormControl(null),\n      end: new FormControl(null)\n    });\n    this.reactiveForm.get('experience').push(frmgroup);\n  }\n  DeleteExperience(index) {\n    const frmArray = this.reactiveForm.get('experience');\n    frmArray.removeAt(index);\n  }\n  GenerateUsername() {\n    let username = '';\n    const fName = this.reactiveForm.get('firstname').value;\n    const lName = this.reactiveForm.get('lastname').value;\n    const dob = this.reactiveForm.get('dob').value;\n    if (fName.length >= 3) {\n      username += fName.slice(0, 3);\n    } else {\n      username += fName;\n    }\n    if (lName.length >= 3) {\n      username += lName.slice(0, 3);\n    } else {\n      username += lName;\n    }\n    let datetime = new Date(dob);\n    username += datetime.getFullYear();\n    username = username.toLowerCase();\n    //console.log(username);\n    // this.reactiveForm.setValue({\n    //   firstname: this.reactiveForm.get('firstname').value,\n    //   lastname: this.reactiveForm.get('lastname').value,\n    //   email: this.reactiveForm.get('email').value,\n    //   username: username,\n    //   dob: this.reactiveForm.get('dob').value,\n    //   gender: this.reactiveForm.get('gender').value,\n    //   address: {\n    //     street: this.reactiveForm.get('address.street').value,\n    //     country: this.reactiveForm.get('address.country').value,\n    //     city: this.reactiveForm.get('address.city').value,\n    //     region: this.reactiveForm.get('address.region').value,\n    //     postal: this.reactiveForm.get('address.postal').value\n    //   },\n    //   skills: this.reactiveForm.get('skills').value,\n    //   experience: this.reactiveForm.get('experience').value\n    // })\n    //this.reactiveForm.get('username').setValue(username);\n    this.reactiveForm.patchValue({\n      username: username,\n      address: {\n        city: 'New Delhi'\n      }\n    });\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})], AppComponent);","map":{"version":3,"names":["Component","FormGroup","FormControl","Validators","FormArray","CustomValidators","AppComponent","constructor","title","formStatus","formdata","ngOnInit","reactiveForm","firstname","required","noSpaceAllowed","min","lastname","email","username","checkUserName","dob","gender","address","street","country","city","region","postal","skills","experience","statusChanges","subscribe","status","console","log","OnFormSubmitted","value","reset","AddSkills","get","push","DeleteSkill","index","controls","removeAt","AddExperience","frmgroup","company","position","totalExp","start","end","DeleteExperience","frmArray","GenerateUsername","fName","lName","length","slice","datetime","Date","getFullYear","toLowerCase","patchValue","__decorate","selector","templateUrl","styleUrls"],"sources":["F:\\GitPractice\\angular-16-complete-course\\13-angular-reactive-form\\final\\src\\app\\app.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators, FormArray } from '@angular/forms';\r\nimport { CustomValidators } from './Validators/noSpaceAllowed.validator';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent implements OnInit{\r\n  title = 'template-driven-form';\r\n  formStatus: string = '';\r\n  formdata: any = {};\r\n\r\n  reactiveForm: FormGroup;\r\n\r\n  ngOnInit(){\r\n    this.reactiveForm = new FormGroup({\r\n      firstname: new FormControl(null, [Validators.required, CustomValidators.noSpaceAllowed,Validators.min(3)]),\r\n      lastname: new FormControl(null, [Validators.required, CustomValidators.noSpaceAllowed]),\r\n      email: new FormControl(null, [Validators.required, Validators.email]),\r\n      username: new FormControl(null, Validators.required, CustomValidators.checkUserName),\r\n      dob: new FormControl(null),\r\n      gender: new FormControl('male'),\r\n      address: new FormGroup({\r\n        street: new FormControl(null, Validators.required),\r\n        country: new FormControl('India', Validators.required),\r\n        city: new FormControl(null),\r\n        region: new FormControl(null),\r\n        postal: new FormControl(null, Validators.required)\r\n      }),\r\n      skills: new FormArray([\r\n        new FormControl(null, Validators.required)\r\n      ]),\r\n      experience: new FormArray([\r\n        \r\n      ])\r\n    })\r\n\r\n    // this.reactiveForm.get('firstname').valueChanges.subscribe((value) => {\r\n    //   console.log(value);\r\n    // })\r\n\r\n    // this.reactiveForm.valueChanges.subscribe((data) => {\r\n    //   console.log(data);\r\n    // })\r\n\r\n    // this.reactiveForm.get('username').statusChanges.subscribe((status) => {\r\n    //   console.log(status);\r\n    // })\r\n\r\n    this.reactiveForm.statusChanges.subscribe((status) => {\r\n      console.log(status)\r\n      this.formStatus = status;\r\n    });\r\n\r\n  }\r\n\r\n  OnFormSubmitted(){\r\n    console.log(this.reactiveForm);\r\n    this.formdata = this.reactiveForm.value;\r\n    this.reactiveForm.reset({\r\n      firstname: null,\r\n      lastname: null,\r\n      email: null,\r\n      username: null,\r\n      dob: null,\r\n      gender: 'male',\r\n      address:{\r\n        street: null,\r\n        country: 'India',\r\n        city: null,\r\n        region: null,\r\n        postal: null\r\n      },\r\n      skills: [\r\n        null\r\n      ],\r\n      experience: [\r\n        \r\n      ]\r\n    });\r\n  }\r\n\r\n  AddSkills(){\r\n    (<FormArray>this.reactiveForm.get('skills'))\r\n      .push(new FormControl(null, Validators.required));\r\n  }\r\n\r\n  DeleteSkill(index: number){\r\n    const controls = <FormArray>this.reactiveForm.get('skills');\r\n    controls.removeAt(index);\r\n  }\r\n\r\n  AddExperience(){\r\n    const frmgroup = new FormGroup({\r\n      company: new FormControl(null),\r\n      position: new FormControl(null),\r\n      totalExp: new FormControl(null),\r\n      start: new FormControl(null),\r\n      end: new FormControl(null),\r\n    });\r\n\r\n    (<FormArray>this.reactiveForm.get('experience')).push(frmgroup);\r\n  }\r\n\r\n  DeleteExperience(index: number){\r\n    const frmArray = <FormArray>this.reactiveForm.get('experience');\r\n    frmArray.removeAt(index);\r\n  }\r\n\r\n  GenerateUsername(){\r\n    let username = '';\r\n    const fName: string= this.reactiveForm.get('firstname').value;\r\n    const lName: string= this.reactiveForm.get('lastname').value;\r\n    const dob: string= this.reactiveForm.get('dob').value;\r\n\r\n    if(fName.length >= 3){\r\n      username += fName.slice(0, 3);\r\n    }\r\n    else {\r\n      username += fName;\r\n    }\r\n\r\n    if(lName.length >= 3){\r\n      username += lName.slice(0, 3);\r\n    }\r\n    else {\r\n      username += lName;\r\n    }\r\n\r\n    let datetime = new Date(dob);\r\n    username += datetime.getFullYear();\r\n\r\n    username = username.toLowerCase();\r\n\r\n    //console.log(username);\r\n\r\n    // this.reactiveForm.setValue({\r\n    //   firstname: this.reactiveForm.get('firstname').value,\r\n    //   lastname: this.reactiveForm.get('lastname').value,\r\n    //   email: this.reactiveForm.get('email').value,\r\n    //   username: username,\r\n    //   dob: this.reactiveForm.get('dob').value,\r\n    //   gender: this.reactiveForm.get('gender').value,\r\n    //   address: {\r\n    //     street: this.reactiveForm.get('address.street').value,\r\n    //     country: this.reactiveForm.get('address.country').value,\r\n    //     city: this.reactiveForm.get('address.city').value,\r\n    //     region: this.reactiveForm.get('address.region').value,\r\n    //     postal: this.reactiveForm.get('address.postal').value\r\n    //   },\r\n    //   skills: this.reactiveForm.get('skills').value,\r\n    //   experience: this.reactiveForm.get('experience').value\r\n    // })\r\n\r\n    //this.reactiveForm.get('username').setValue(username);\r\n\r\n    this.reactiveForm.patchValue({\r\n      username: username,\r\n      address: {\r\n        city: 'New Delhi'\r\n      }\r\n    })\r\n}\r\n} \r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}